#!/usr/bin/env ansible-playbook
#
# (c) 2016 DataNexus Inc.  All Rights Reserved
---
# Build our zookeeper host group
- name: Create zookeeper host group
  hosts: localhost
  gather_facts: no
  tasks:
    # if we're using dynamic provisioning; build the host groups from the
    # meta-data associated with the matching nodes in the selected cloud
    - block:
      # load the 'local variables file', if one was defined, to get any
      # variables we might need from that file when constructing our host
      # groups
      - name: Load local variables file
        include_vars:
          file: "{{local_vars_file}}"
        when: not (local_vars_file is undefined or local_vars_file is none or local_vars_file | trim == '')
      # then, build our host groups
      - include_role:
          name: build-app-host-groups
        vars:
          host_group_list:
            - name: zookeeper
      when: cloud is defined and (cloud == 'aws' or cloud == 'osp')

# Then, deploy Zookeeper to the nodes in the zookeeper host group that was
# passed in (if there is more than one node passed in, those nodes will be
# configured as a single Zookeeper ensemble)
- name: Install/configure servers (zookeeper)
  hosts: zookeeper
  gather_facts: no
  vars_files:
    - vars/zookeeper.yml
  vars:
    - combined_package_list: "{{ (default_packages|default([])) | union(zookeeper_package_list) | union((install_packages_by_tag|default({})).zookeeper|default([])) }}"
    - zookeeper_nodes: "{{groups['zookeeper']}}"
  roles:
    # first, initialize the play by loading any `local_vars_file` that may have
    # been passed in, restarting the network on the target nodes (if desired),
    # and determining the `data_iface` and `api_iface` values from the input
    # `iface_description_array` (if one was passed in)
    - role: initialize-play
    # deploy Zookeeper to our new nodes, leaving the zookeeper service stopped
    # on those nodes
    - role: add-nodes
      start_zookeeper: false
    # ensure that the list of `data_iface` addresses for the new Zookeeper
    # nodes we're adding to the cluster is available as a fact for all of our
    # ensemble nodes
    - role: get-zk-nodes
    # determine the ensemble ID and role for each of the existing nodes in the
    # ensemble for each of the existing nodes; this role will also setup lists
    # containing the `follower_nodes` and `leader_node` based on these roles
    - role: get-ensemble-role-and-id
      when: inventory_hostname in existing_nodes
    # reconfigure the existing and new ensemble nodes to include both the
    # current nodes and nodes we are adding in their configuration
    - role: reconfigure-ensemble-nodes
    # restart the follower nodes, then the leader node, then the nodes we're
    # adding to the ensemble
    - role: rolling-restart
      target_nodes: "{{follower_nodes + leader_node + zookeeper_nodes}}"
